var _initClass, _dec, _dec2, _init_PartitionKey, _dec3, _init_SortKey, _dec4, _init_SecondAttribute;
function applyDecs2203RFactory() { function createAddInitializerMethod(initializers, decoratorFinishedRef) { return function (initializer) { !function (decoratorFinishedRef, fnName) { if (decoratorFinishedRef.v) throw new Error("attempted to call " + fnName + " after decoration was finished"); }(decoratorFinishedRef, "addInitializer"), assertCallable(initializer, "An initializer"), initializers.push(initializer); }; } function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, value) { var kindStr; switch (kind) { case 1: kindStr = "accessor"; break; case 2: kindStr = "method"; break; case 3: kindStr = "getter"; break; case 4: kindStr = "setter"; break; default: kindStr = "field"; } var get, set, ctx = { kind: kindStr, name: isPrivate ? "#" + name : name, static: isStatic, private: isPrivate }, decoratorFinishedRef = { v: !1 }; 0 !== kind && (ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef)), 0 === kind ? isPrivate ? (get = desc.get, set = desc.set) : (get = function () { return this[name]; }, set = function (v) { this[name] = v; }) : 2 === kind ? get = function () { return desc.value; } : (1 !== kind && 3 !== kind || (get = function () { return desc.get.call(this); }), 1 !== kind && 4 !== kind || (set = function (v) { desc.set.call(this, v); })), ctx.access = get && set ? { get: get, set: set } : get ? { get: get } : { set: set }; try { return dec(value, ctx); } finally { decoratorFinishedRef.v = !0; } } function assertCallable(fn, hint) { if ("function" != typeof fn) throw new TypeError(hint + " must be a function"); } function assertValidReturnValue(kind, value) { var type = typeof value; if (1 === kind) { if ("object" !== type || null === value) throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0"); void 0 !== value.get && assertCallable(value.get, "accessor.get"), void 0 !== value.set && assertCallable(value.set, "accessor.set"), void 0 !== value.init && assertCallable(value.init, "accessor.init"); } else if ("function" !== type) { var hint; throw hint = 0 === kind ? "field" : 10 === kind ? "class" : "method", new TypeError(hint + " decorators must return a function or void 0"); } } function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers) { var desc, init, value, newValue, get, set, decs = decInfo[0]; if (isPrivate ? desc = 0 === kind || 1 === kind ? { get: decInfo[3], set: decInfo[4] } : 3 === kind ? { get: decInfo[3] } : 4 === kind ? { set: decInfo[3] } : { value: decInfo[3] } : 0 !== kind && (desc = Object.getOwnPropertyDescriptor(base, name)), 1 === kind ? value = { get: desc.get, set: desc.set } : 2 === kind ? value = desc.value : 3 === kind ? value = desc.get : 4 === kind && (value = desc.set), "function" == typeof decs) void 0 !== (newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, value)) && (assertValidReturnValue(kind, newValue), 0 === kind ? init = newValue : 1 === kind ? (init = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue);else for (var i = decs.length - 1; i >= 0; i--) { var newInit; if (void 0 !== (newValue = memberDec(decs[i], name, desc, initializers, kind, isStatic, isPrivate, value))) assertValidReturnValue(kind, newValue), 0 === kind ? newInit = newValue : 1 === kind ? (newInit = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = { get: get, set: set }) : value = newValue, void 0 !== newInit && (void 0 === init ? init = newInit : "function" == typeof init ? init = [init, newInit] : init.push(newInit)); } if (0 === kind || 1 === kind) { if (void 0 === init) init = function (instance, init) { return init; };else if ("function" != typeof init) { var ownInitializers = init; init = function (instance, init) { for (var value = init, i = 0; i < ownInitializers.length; i++) value = ownInitializers[i].call(instance, value); return value; }; } else { var originalInitializer = init; init = function (instance, init) { return originalInitializer.call(instance, init); }; } ret.push(init); } 0 !== kind && (1 === kind ? (desc.get = value.get, desc.set = value.set) : 2 === kind ? desc.value = value : 3 === kind ? desc.get = value : 4 === kind && (desc.set = value), isPrivate ? 1 === kind ? (ret.push(function (instance, args) { return value.get.call(instance, args); }), ret.push(function (instance, args) { return value.set.call(instance, args); })) : 2 === kind ? ret.push(value) : ret.push(function (instance, args) { return value.call(instance, args); }) : Object.defineProperty(base, name, desc)); } function applyMemberDecs(Class, decInfos) { for (var protoInitializers, staticInitializers, ret = [], existingProtoNonFields = new Map(), existingStaticNonFields = new Map(), i = 0; i < decInfos.length; i++) { var decInfo = decInfos[i]; if (Array.isArray(decInfo)) { var base, initializers, kind = decInfo[1], name = decInfo[2], isPrivate = decInfo.length > 3, isStatic = kind >= 5; if (isStatic ? (base = Class, 0 !== (kind -= 5) && (initializers = staticInitializers = staticInitializers || [])) : (base = Class.prototype, 0 !== kind && (initializers = protoInitializers = protoInitializers || [])), 0 !== kind && !isPrivate) { var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields, existingKind = existingNonFields.get(name) || 0; if (!0 === existingKind || 3 === existingKind && 4 !== kind || 4 === existingKind && 3 !== kind) throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name); !existingKind && kind > 2 ? existingNonFields.set(name, kind) : existingNonFields.set(name, !0); } applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers); } } return pushInitializers(ret, protoInitializers), pushInitializers(ret, staticInitializers), ret; } function pushInitializers(ret, initializers) { initializers && ret.push(function (instance) { for (var i = 0; i < initializers.length; i++) initializers[i].call(instance); return instance; }); } return function (targetClass, memberDecs, classDecs) { return { e: applyMemberDecs(targetClass, memberDecs), get c() { return function (targetClass, classDecs) { if (classDecs.length > 0) { for (var initializers = [], newClass = targetClass, name = targetClass.name, i = classDecs.length - 1; i >= 0; i--) { var decoratorFinishedRef = { v: !1 }; try { var nextNewClass = classDecs[i](newClass, { kind: "class", name: name, addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef) }); } finally { decoratorFinishedRef.v = !0; } void 0 !== nextNewClass && (assertValidReturnValue(10, nextNewClass), newClass = nextNewClass); } return [newClass, function () { for (var i = 0; i < initializers.length; i++) initializers[i].call(newClass); }]; } }(targetClass, classDecs); } }; }; }
function _applyDecs2203R(targetClass, memberDecs, classDecs) { return (_applyDecs2203R = applyDecs2203RFactory())(targetClass, memberDecs, classDecs); }
function _identity(x) { return x; }
//@ts-check

import { Table, Connect, HashKey, Attribute, RangeKey } from '../../lib/index.js';
let _BabelTest;
_dec = Connect();
_dec2 = HashKey.S();
_dec3 = RangeKey.S();
_dec4 = Attribute.S();
new class extends _identity {
  static {
    class BabelTest extends Table {
      static {
        ({
          e: [_init_PartitionKey, _init_SortKey, _init_SecondAttribute],
          c: [_BabelTest, _initClass]
        } = _applyDecs2203R(this, [[_dec2, 0, "PartitionKey"], [_dec3, 0, "SortKey"], [_dec4, 0, "SecondAttribute"]], [_dec]));
      }
      /** @type {import("../../lib/types").Key.Hash<string>} */
      PartitionKey = _init_PartitionKey(this);

      /** @type {import("../../lib/types").Key.Range<string>} */
      SortKey = _init_SortKey(this);

      /** @type {string} */
      SecondAttribute = _init_SecondAttribute(this);
    }
  }
  globald = this.globalSecondaryIndex('SecondAttribute');
  constructor() {
    super(_BabelTest), _initClass();
  }
}();
console.log(_BabelTest);
process.exit();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUYWJsZSIsIkNvbm5lY3QiLCJIYXNoS2V5IiwiQXR0cmlidXRlIiwiUmFuZ2VLZXkiLCJfQmFiZWxUZXN0IiwiX2RlYyIsIl9kZWMyIiwiUyIsIl9kZWMzIiwiX2RlYzQiLCJfaWRlbnRpdHkiLCJCYWJlbFRlc3QiLCJlIiwiX2luaXRfUGFydGl0aW9uS2V5IiwiX2luaXRfU29ydEtleSIsIl9pbml0X1NlY29uZEF0dHJpYnV0ZSIsImMiLCJfaW5pdENsYXNzIiwiX2FwcGx5RGVjczIyMDNSIiwiUGFydGl0aW9uS2V5IiwiU29ydEtleSIsIlNlY29uZEF0dHJpYnV0ZSIsImdsb2JhbGQiLCJnbG9iYWxTZWNvbmRhcnlJbmRleCIsImNvbnN0cnVjdG9yIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3MiLCJleGl0Il0sInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9iYWJlbC9iYWJlbC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vQHRzLWNoZWNrXG5cbmltcG9ydCB7VGFibGUsIENvbm5lY3QsIEhhc2hLZXksIEF0dHJpYnV0ZSwgUmFuZ2VLZXl9IGZyb20gJy4uLy4uL2xpYi9pbmRleC5qcydcblxuQENvbm5lY3QoKVxuY2xhc3MgQmFiZWxUZXN0IGV4dGVuZHMgVGFibGUge1xuICAgIC8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vLi4vbGliL3R5cGVzXCIpLktleS5IYXNoPHN0cmluZz59ICovXG4gICAgQEhhc2hLZXkuUygpXG4gICAgUGFydGl0aW9uS2V5O1xuXG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoXCIuLi8uLi9saWIvdHlwZXNcIikuS2V5LlJhbmdlPHN0cmluZz59ICovXG4gICAgQFJhbmdlS2V5LlMoKVxuICAgIFNvcnRLZXk7XG5cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBAQXR0cmlidXRlLlMoKVxuICAgIFNlY29uZEF0dHJpYnV0ZTtcblxuICAgIHN0YXRpYyBnbG9iYWxkID0gdGhpcy5nbG9iYWxTZWNvbmRhcnlJbmRleCgnU2Vjb25kQXR0cmlidXRlJylcbn1cblxuY29uc29sZS5sb2coQmFiZWxUZXN0KVxuXG5wcm9jZXNzLmV4aXQoKTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBLFNBQVFBLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLFNBQVMsRUFBRUMsUUFBUSxRQUFPLG9CQUFvQjtBQUFBLElBQUFDLFVBQUE7QUFBQUMsSUFBQSxHQUU5RUwsT0FBTyxFQUFFO0FBQUFNLEtBQUEsR0FHTEwsT0FBTyxDQUFDTSxDQUFDLEVBQUU7QUFBQUMsS0FBQSxHQUlYTCxRQUFRLENBQUNJLENBQUMsRUFBRTtBQUFBRSxLQUFBLEdBSVpQLFNBQVMsQ0FBQ0ssQ0FBQyxFQUFFO0FBQUEsa0JBQUFHLFNBQUE7RUFBQTtJQVhsQixNQUFBQyxTQUFBLFNBQ3dCWixLQUFLLENBQUM7TUFBQTtRQUFBO1VBQUFhLENBQUEsR0FBQUMsa0JBQUEsRUFBQUMsYUFBQSxFQUFBQyxxQkFBQTtVQUFBQyxDQUFBLEdBQUFaLFVBQUEsRUFBQWEsVUFBQTtRQUFBLElBQUFDLGVBQUEsU0FBQVosS0FBQSx1QkFBQUUsS0FBQSxrQkFBQUMsS0FBQSwyQkFBQUosSUFBQTtNQUFBO01BQzFCO01BRUFjLFlBQVksR0FBQU4sa0JBQUE7O01BRVo7TUFFQU8sT0FBTyxHQUFBTixhQUFBOztNQUVQO01BRUFPLGVBQWUsR0FBQU4scUJBQUE7SUFHbkI7RUFBQztFQURVTyxPQUFPLEdBQUcsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQztFQUFBQyxZQUFBO0lBQUEsTUFBQXBCLFVBQUEsR0FBQWEsVUFBQTtFQUFBO0FBQUE7QUFHakVRLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDZixVQUFTLENBQUM7QUFFdEJnQixPQUFPLENBQUNDLElBQUksRUFBRSJ9